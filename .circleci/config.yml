version: 2

# Docker environment.
defaults: &defaults
  working_directory: /go/src/istio.io/cni
  docker:
    - image: istio/ci:go1.10-k8s1.10.4-helm2.7.2-minikube0.25
  environment:
    GOPATH: /go
    SKIP_CLEANUP: true

dind-env: &dind-env
  GOPATH: /go
  SKIP_CLEANUP: true
  DOCKER_VERSION: "17.03.0-ce"
  CNI_PLUGIN: flannel

dind-env-ipv6: &dind-env-ipv6
  GOPATH: /go
  SKIP_CLEANUP: true
  DOCKER_VERSION: "17.03.0-ce"
  CNI_PLUGIN: bridge
  IP_MODE: ipv6
  DIND_ALLOW_AAAA_USE: 'true'

# dind default setup
dind-defaults: &dind-defaults
  docker:
    - image: istio/ci:go1.10-k8s1.10.4-helm2.7.2-minikube0.25
  working_directory: ~/kubeadm-dind-cluster

dind-setup: &dind-setup
  name: Set up the environment
  command: |
    sudo apt-get -qq update
    sudo apt-get install -y curl ca-certificates git liblz4-tool rsync socat tzdata
    # Start port forwarder
    "${PWD}/build/portforward.sh" start

dind-display_cluster_state: &dind-display_cluster_state
  command: |
    docker exec -t kube-master sh -c "kubectl version"
    docker exec -t kube-master sh -c "kubectl get nodes"
    docker exec -t kube-master sh -c "kubectl get all --all-namespaces -o wide"

dind-dump_cluster: &dind-dump_cluster
  command: |
    mkdir -p /tmp/cluster_state
    out="/tmp/cluster_state/dump-1.gz"
    if [[ -f ${out} ]]; then
      out="/tmp/cluster_state/dump-2.gz"
    fi
    if [[ ${K8S_SRC:-} ]]; then
      cd kubernetes
      ../dind-cluster.sh dump | gzip >"${out}"
    else
      ./dind-cluster.sh dump | gzip >"${out}"
    fi


# VM environment. Includes docker.
integrationDefaults: &integrationDefaults
  machine: true
  working_directory: /go/src/istio.io/cni #same as docker
  environment:
    - CHANGE_MINIKUBE_NONE_USER: true
    - GOPATH: /go
    - SKIP_CLEANUP: true
    - KUBECONFIG: /go/out/minikube.conf
    - TEST_ENV: minikube-none

# Common procedure to initialize working directory
initWorkingDir: &initWorkingDir
  type: shell
  name: Initialize Working Directory
  pwd: /
  command: |
    sudo mkdir -p /go/src/istio.io/cni
    sudo chown -R circleci /go
    mkdir -p /go/out/tests
    mkdir -p /go/out/logs
    mkdir -p /home/circleci/logs
    # TODO - temporary until 'machine' image is updated or customized
    GOROOT=$(go env GOROOT)
    sudo rm -r $(go env GOROOT)
    sudo mkdir $GOROOT
    curl https://dl.google.com/go/go1.10.4.linux-amd64.tar.gz | sudo tar xz -C $GOROOT --strip-components=1

# The common steps for running kubeadm-dind-clusters and istio e2e tests
e2e-dind-test: &e2e-dind-test
  steps:
    - setup_remote_docker
    - checkout:
        path: /go/src/istio.io/cni
    - attach_workspace:
        at: /go/src/_save
    - run:
        name: Build test-e2e container
        working_directory: /go/src/istio.io/cni
        command: |
          mkdir .circleci/helm
          cp -r deployments/kubernetes/install/helm/istio-cni .circleci/helm/
          docker build --build-arg istio_branch=${ISTIO_BRANCH:-master} -t e2e-runner:latest .circleci
    - run:
        name: Get KDC
        working_directory: ~/kubeadm-dind-cluster
        command: |
          git clone https://github.com/kubernetes-sigs/kubeadm-dind-cluster .
    - run:
        <<: *dind-setup
    - run:
        name: Start kubeadm in DinD (KDC)
        command: |
          export IP_MODE=${IP_MODE:-ipv4}
          export DIND_PORT_FORWARDER_WAIT=1
          export DIND_PORT_FORWARDER="${PWD}/build/portforward.sh"
          ./fixed/dind-cluster-v1.10.sh up
    - run:
        name: Display cluster status (1)
        <<: *dind-display_cluster_state
    - run:
        name: Dump cluster state (1)
        when: always
        <<: *dind-dump_cluster
    - run:
        name: Restore built images
        command: |
          for node in kube-master kube-node-1 kube-node-2; do
            docker cp /go/src/_save/images.tar $node:/images.tar
            docker exec -t $node sh -c "docker load -i /images.tar"
            docker exec -t $node sh -c "docker images"
          done
    - run:
        name: Run e2e test
        command: |
          docker run --name=istio-e2e --network=container:kube-master -t -e CNI_TAG=${CIRCLE_SHA1} -e CNI_HUB='docker.io/istio' -e HUB=${ISTIO_HUB:-gcr.io/istio-release} -e TAG=${ISTIO_TAG:-master-latest-daily} -e ISTIO_REMOTE=${ISTIO_REMOTE} -e ISTIO_REMOTE_BRANCH=${ISTIO_REMOTE_BRANCH} -e CNI_ENABLE=${CNI_ENABLE:-true} -e SKIP_CLEAN='1' e2e-runner:latest /go/run_e2e.sh
    - run:
        name: Display cluster status (2)
        when: always
        <<: *dind-display_cluster_state
    - run:
        name: Dump cluster state (2)
        when: always
        <<: *dind-dump_cluster
    - store_artifacts:
        path: /tmp/cluster_state
    - run:
        name: Bring down the cluster
        command: |
          ./dind-cluster.sh down
    - run:
        name: Clean the cluster
        command: |
          ./dind-cluster.sh clean



jobs:
  build:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build docker images
          command: |
            TAG=${CIRCLE_SHA1} GOOS=linux make build
            TAG=${CIRCLE_SHA1} GOOS=linux make docker
            images_to_save+=("docker.io/istio/install-cni:${CIRCLE_SHA1}")
            mkdir -p _save
            docker save "${images_to_save[@]}" >_save/images.tar
      - persist_to_workspace:
          root: _save
          paths:
          - images.tar

  shellcheck:
    docker:
      - image: koalaman/shellcheck-alpine:v0.6.0
    steps:
      - checkout
      - run:
          name: Check shell scripts
          command: /root/project/bin/check_shell_scripts.sh

  lint:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Run linters
          command: make lint

  install-cni:
    <<: *integrationDefaults
    steps:
      - <<: *initWorkingDir
      - checkout
      - attach_workspace:
          at:  /go
      - run:
          command: |
            if [ ! -f /go/out/linux_amd64/release/istio-cni ]; then
              # Should only happen when re-running a job, and the workspace is gone
              time make build
            fi
            make docker.all
      - run: make test
      - store_artifacts:
          path: /home/circleci/logs
      - store_artifacts:
          path: /tmp
      - store_test_results:
          path: /go/out/tests

  # nightly test & publish
  # NOTE: publish only happens for CircleCI orgs with DOCKER_USER & DOCKER_PASS set.
  #       Istio currently does not use CircleCI to publish nightly.  Nightly artifacts
  #       are published by istio/istio/release tooling & go to gcr.io/istio-release.
  nightly:
    <<: *integrationDefaults
    steps:
      - <<: *initWorkingDir
      - checkout
      - run: GOOS=linux make build
      - run: HUB=${DOCKER_USER:-istio} TAG=nightly-${CIRCLE_BRANCH} make docker.all
      - run: HUB=${DOCKER_USER:-istio} TAG=nightly-${CIRCLE_BRANCH} make test
      - run:
          command: |
            if [ ! -z "${DOCKER_USER}" ] ; then
              echo "Pushing docker images"

              docker login -u ${DOCKER_USER} -p ${DOCKER_PASS}
              HUB=${DOCKER_USER} TAG=nightly-${CIRCLE_BRANCH} make docker.push
            fi
      - run:
          command: |
            if [ ! -z "${DOCKER_USER}" ] ; then
              echo "Pushing images tagged with git version"
              docker login -u ${DOCKER_USER} -p ${DOCKER_PASS}
              TAG=$(git describe)
              HUB=${DOCKER_USER} TAG=${TAG} make docker.all docker.push
            fi

  e2e-dind-istio1.1:
    <<: *dind-defaults
    environment:
      <<: *dind-env
      ISTIO_BRANCH: release-1.1
      ISTIO_HUB: gcr.io/istio-release
      ISTIO_TAG: release-1.1-latest-daily
    <<: *e2e-dind-test  

  e2e-dind:
    <<: *dind-defaults
    environment:
      <<: *dind-env
      ISTIO_BRANCH: master
      ISTIO_HUB: gcr.io/istio-release
      ISTIO_TAG: master-latest-daily
    <<: *e2e-dind-test

  e2e-dind-ipv6:
    <<: *dind-defaults
    environment:
      <<: *dind-env-ipv6
      ISTIO_BRANCH: master
      ISTIO_HUB: docker.io/tiswanso
      ISTIO_TAG: ipv6-13117
      ISTIO_REMOTE: https://github.com/tiswanso/istio.git
      ISTIO_REMOTE_BRANCH: simpletest_ipv6
      CNI_ENABLE: false
    <<: *e2e-dind-test

workflows:
  version: 2

  all:
    jobs:
      # - shellcheck
      - lint
      - build
      - install-cni:
          requires:
            - build
      - e2e-dind-ipv6:
          requires:
            - build
      - e2e-dind:
          requires:
            - build
      - e2e-dind-istio1.1:
          requires:
            - build

  # Nightly test
  nightly:
    triggers:
    - schedule:
        # run at 09:45:00 UTC to try to pickup Istio's nightly
        cron: "45 9 * * *"
        filters:
          branches:
            only:
            - master
            - release-1.1
    jobs:
    - build
    - nightly:
        context: org-global
        requires:
          - build
    - e2e-dind:
        requires:
          - build
    - e2e-dind-istio1.1:
        requires:
          - build
