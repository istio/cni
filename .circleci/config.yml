version: 2

# Docker environment.
defaults: &defaults
  working_directory: /go/src/istio.io/cni
  docker:
    - image: istio/ci:go1.10-k8s1.10.4-helm2.7.2-minikube0.25
  environment:
    GOPATH: /go
    SKIP_CLEANUP: true

dind-env: &dind-env
  DOCKER_VERSION: "17.03.0-ce"

# dind docker env
dind-defaults: &dind-defaults
  docker:
    - image: istio/ci:go1.10-k8s1.10.4-helm2.7.2-minikube0.25
  environment:
    GOPATH: /go
    SKIP_CLEANUP: true
    <<: *dind-env
  working_directory: ~/kubeadm-dind-cluster

dind-setup: &dind-setup
  name: Set up the environment
  command: |
    sudo apt-get -qq update
    sudo apt-get install -y curl ca-certificates git liblz4-tool rsync socat tzdata
    #curl -sSL -o "/tmp/docker-${DOCKER_VERSION}.tgz" "https://get.docker.com/builds/Linux/x86_64/docker-${DOCKER_VERSION}.tgz"
    #tar -xz -C /tmp -f "/tmp/docker-${DOCKER_VERSION}.tgz"
    #sudo mv /tmp/docker/* /usr/bin
    # Start port forwarder
    "${PWD}/build/portforward.sh" start

dind-display_cluster_state: &dind-display_cluster_state
  command: |
    DIND_ROOT="$PWD"

    kubectl="kubectl"
    if [[ ${K8S_SRC:-} ]]; then
      cd kubernetes
      kubectl="cluster/kubectl.sh"
    fi

    apiserver_port="$( "${DIND_ROOT}/dind-cluster.sh" apiserver-port )"
    "${DIND_ROOT}/build/portforward.sh" -wait "$apiserver_port"

    "${kubectl}" "--server=:${apiserver_port}" version
    "${kubectl}" "--server=:${apiserver_port}" get all --all-namespaces -o wide
    "${kubectl}" "--server=:${apiserver_port}" get nodes

dind-dump_cluster: &dind-dump_cluster
  command: |
    mkdir -p /tmp/cluster_state
    out="/tmp/cluster_state/dump-1.gz"
    if [[ -f ${out} ]]; then
      out="/tmp/cluster_state/dump-2.gz"
    fi
    if [[ ${K8S_SRC:-} ]]; then
      cd kubernetes
      ../dind-cluster.sh dump | gzip >"${out}"
    else
      ./dind-cluster.sh dump | gzip >"${out}"
    fi


# VM environment. Includes docker.
integrationDefaults: &integrationDefaults
  machine: true
  working_directory: /go/src/istio.io/cni #same as docker
  environment:
    - CHANGE_MINIKUBE_NONE_USER: true
    - GOPATH: /go
    - SKIP_CLEANUP: true
    - KUBECONFIG: /go/out/minikube.conf
    - TEST_ENV: minikube-none

# Common procedure to initialize working directory
initWorkingDir: &initWorkingDir
  type: shell
  name: Initialize Working Directory
  pwd: /
  command: |
    sudo mkdir -p /go/src/istio.io/cni
    sudo chown -R circleci /go
    mkdir -p /go/out/tests
    mkdir -p /go/out/logs
    mkdir -p /home/circleci/logs
    # TODO - temporary until 'machine' image is updated or customized
    GOROOT=$(go env GOROOT)
    sudo rm -r $(go env GOROOT)
    sudo mkdir $GOROOT
    curl https://dl.google.com/go/go1.10.4.linux-amd64.tar.gz | sudo tar xz -C $GOROOT --strip-components=1

jobs:
  build:
    <<: *defaults
    steps:
      - checkout
      - run: GOOS=linux make build
      - run: make lint

  install-cni:
    <<: *integrationDefaults
    steps:
      - <<: *initWorkingDir
      - checkout
      - attach_workspace:
          at:  /go
      - run:
          command: |
            if [ ! -f /go/out/linux_amd64/release/istio-cni ]; then
              # Should only happen when re-running a job, and the workspace is gone
              time make build
            fi
            make docker.all
      - run: make test
      - store_artifacts:
          path: /home/circleci/logs
      - store_artifacts:
          path: /tmp
      - store_test_results:
          path: /go/out/tests

  nightly:
    <<: *integrationDefaults
    steps:
      - <<: *initWorkingDir
      - checkout
      - run: GOOS=linux make build
      - run: TAG=nightly-${CIRCLE_BRANCH} make docker.all
      - run: TAG=nightly-${CIRCLE_BRANCH} make test
      - run:
          command: |
            if [ ! -z "${DOCKER_USER}" ] ; then
              echo "Pushing docker images"

              docker login -u ${DOCKER_USER} -p ${DOCKER_PASS}
              TAG=nightly-${CIRCLE_BRANCH} make docker.push
            fi

  e2e-dind:
    <<: *dind-defaults
    steps:
      - setup_remote_docker
      - run:
          name: Get KDC
          working_directory: ~/kubeadm-dind-cluster
          command: |
            git clone https://github.com/kubernetes-sigs/kubeadm-dind-cluster .
      - run:
          <<: *dind-setup
      - run:
          name: Start kubeadm in DinD (KDC)
          command: |
            export DIND_PORT_FORWARDER_WAIT=1
            export DIND_PORT_FORWARDER="${PWD}/build/portforward.sh"
            ./fixed/dind-cluster-v1.10.sh up
      - run:
          name: Display cluster status (1)
          <<: *dind-display_cluster_state
      - run:
          name: Dump cluster state (1)
          when: always
          <<: *dind-dump_cluster
      - run:
          name: Get Istio
          shell: /bin/bash
          working_directory: /go/src/istio.io/istio
          command: |
            git clone https://github.com/istio/istio.git .
      - run:
          name: Run Istio e2e_simple
          shell: /bin/bash
          working_directory: /go/src/istio.io/istio
          command: |
            GOOS=linux HUB=gcr.io/istio-release TAG=master-latest-daily make istioctl
            # setup port forwarding for kubectl to work with KDC cluster
            DIND_ROOT=~/kubeadm-dind-cluster
            apiserver_port="$( "${DIND_ROOT}/dind-cluster.sh" apiserver-port )"
            "${DIND_ROOT}/build/portforward.sh" -wait "$apiserver_port"
            HUB=gcr.io/istio-release TAG=master-latest-daily ENABLE_ISTIO_CNI=false EXTRA_HELM_SETTINGS="--set istio-cni.excludeNamespaces={} --set istio-cni.hub=istio --set istio-cni.tag=${CIRCLE_SHA1} --set istio-cni.pullPolicy=IfNotPresent" E2E_ARGS="--kube_inject_configmap=istio-sidecar-injector" make test/local/auth/e2e_simple

      - run:
          name: Display cluster status (2)
          when: always
          <<: *dind-display_cluster_state
      - run:
          name: Dump cluster state (2)
          when: always
          <<: *dind-dump_cluster
      - store_artifacts:
          path: /tmp/cluster_state
      - run:
          name: Bring down the cluster
          command: |
            ./dind-cluster.sh down
      - run:
          name: Clean the cluster
          command: |
            ./dind-cluster.sh clean

workflows:
  version: 2

  all:
    jobs:
      - build
      - install-cni:
          requires:
            - build
      - e2e-dind

  # Nightly publish
  nightly:
    triggers:
    - schedule:
        cron: "30 * * * *"
        filters:
          branches:
            only:
            - master
    jobs:
    - build
    - nightly:
        context: org-global
        requires:
          - build
